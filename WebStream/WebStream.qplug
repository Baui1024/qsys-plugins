--[[

  Q-Sys Web Streaming Plugin
  Author: Michael Goodyear
  Email: michael@locimation.com
  Version: 1.1.0
  
  Copyright 2020 Locimation Pty Ltd

  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software
  and associated documentation files (the "Software"),
  to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the
  following conditions:

  The above copyright notice and this permission
  notice shall be included in all copies or substantial
  portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
  OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
  EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

]]

PluginInfo = {
  Name = 'Locimation~WebStream',
  Version = '1.1.0',
  Id = 'd8f36599-f487-410a-9715-436005aee503',
  Description = 'Added bitrate control'
};

function GetColor()
  return { 165, 69, 214 };
end;

function GetPrettyName(props)
  if(props['Stream Count'].Value < 3) then
    return 'Locimation WebStream';
  else
    return 'WebStream by Locimation v' .. PluginInfo.Version;
  end;
end;

function GetProperties()
  return {
    {
      Name = 'Stream Count',
      Type = 'integer',
      Min = 1,
      Max = 4,
      Value = 1
    },
    {
      Name = 'Server Port',
      Type = 'integer',
      Min = 1024,
      Max = 65535,
      Value = 8180
    },
    {
      Name = 'Bitrate',
      Type = 'enum',
      Value = '128kbps',
      Choices = {
        '16kbps',
        '24kbps',
        '32kbps',
        '40kbps',
        '48kbps',
        '56kbps',
        '64kbps',
        '80kbps',
        '96kbps',
        '112kbps',
        '128kbps',
        '160kbps',
        '192kbps',
        '224kbps',
        '256kbps',
        '320kbps'
      }
    }
  };
end;

function GetComponents(props)
  local components = {};
  for i=1,props['Stream Count'].Value do
    table.insert(components, {
      Name = 'MST' .. i,
      Type = 'media_stream_transmitter'
    });
  end;
  return components;
end;

function GetPins(props)
  local pins = {};
  for i = 1,props['Stream Count'].Value do
    for j = 1,2 do
      table.insert(pins, {
        Name = ('Stream %d Channel %d'):format(i,j),
        Direction = 'input'
      });
    end;
  end;
  return pins;
end;

function GetWiring(props)
  local wiring = {};
  for i = 1,props['Stream Count'].Value do
    for j = 1,2 do
      table.insert(wiring, {
        ('Stream %d Channel %d'):format(i,j),
        ('MST%d Channel %d'):format(i,j)
      });
    end;
  end;
  return wiring;
end;

function GetControls(props)
  local controls = {
    {
      Name = 'Status',
      ControlType = 'Indicator',
      IndicatorType = 'Status',
      UserPin = true,
      PinStyle = 'Output'
    },
  };
  for i=1,props['Stream Count'].Value do
    table.insert(controls, {
      Name = ('Stream %d URL'):format(i),
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      UserPin = true,
      PinStyle = 'Output'
    });
    for j=1,2 do
      table.insert(controls, {
        Name = ('Stream %d Channel %d Peak Level'):format(i, j),
        ControlType = 'Indicator',
        IndicatorType = 'Meter',
        UserPin = true,
        PinStyle = 'Output'
      });
    end;
    table.insert(controls, {
      Name = ('Stream %d Listener Count'):format(i),
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      UserPin = true,
      PinStyle = 'Output'
    });
  end;
  return controls;
end;

function GetControlLayout(props)

  GridUnit = 8;
  LogoOffset = 100;
  ControlSpacing = 3;
  ControlHeight = GridUnit * 4;
  StreamCount = props['Stream Count'].Value;

  local graphics = {
    {
      Type = 'GroupBox',
      Position = { 0, 0 },
      Size = { 42*GridUnit, 38*GridUnit + (5*GridUnit)*(StreamCount - 1) },
      Fill = { 255, 255, 255 }
    },
    {
      Type = 'Label',
      Text = 'Web',
      HTextAlign = 'Right',
      Font = 'Open Sans',
      FontSize = 40,
      Position = { 40, 55 },
      Size = { 96, 51 },
      Color = { 111, 47, 143 }
    },
    {
      Type = 'Label',
      Text = 'Stream',
      Position = { 136, 55 },
      Size = { 158, 51 },
      HTextAlign = 'Left',
      Font = 'Open Sans',
      FontStyle = 'Bold',
      FontSize = 40,
      Color = { 111, 47, 143 }
    },
    {
      Type = 'Svg',
      Image = 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAyNC4zLjAsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCINCgkgdmlld0JveD0iMCAwIDQ5NC41IDQ5NC41IiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA0OTQuNSA0OTQuNTsiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPGc+DQoJCTxnPg0KCQkJPHBhdGggc3R5bGU9ImZpbGw6IzZGMkY4RjsiIGQ9Ik0yODYuMiw0MTcuNmMtNC44LTQuOC03LjctMTEuNC03LjctMTguN2MtMC4xLTEwMC45LTgyLjEtMTgyLjktMTgzLTE4Mw0KCQkJCUM4MC45LDIxNS45LDY5LDIwNCw2OSwxODkuNGMwLTE0LjYsMTEuOS0yNi40LDI2LjQtMjYuNGMxMzAuMSwwLDIzNS45LDEwNS44LDIzNS45LDIzNS45YzAsMTQuNi0xMS45LDI2LjQtMjYuNCwyNi40DQoJCQkJQzI5Ny42LDQyNS4zLDI5MC45LDQyMi40LDI4Ni4yLDQxNy42eiIvPg0KCQk8L2c+DQoJCTxnPg0KCQkJPHBhdGggc3R5bGU9ImZpbGw6IzZGMkY4RjsiIGQ9Ik0xODUsNDE3LjZjLTQuOC00LjgtNy43LTExLjQtNy43LTE4LjdjMC0yMS44LTguNi00Mi40LTI0LTU3LjhzLTM2LTI0LTU3LjgtMjQNCgkJCQljLTE0LjYsMC0yNi40LTExLjktMjYuNC0yNi40YzAtMTQuNiwxMS45LTI2LjQsMjYuNC0yNi40YzM1LjksMCw2OS43LDE0LDk1LjIsMzkuNWMyNS41LDI1LjUsMzkuNSw1OS4zLDM5LjQsOTUuMg0KCQkJCWMwLDE0LjYtMTEuOSwyNi40LTI2LjQsMjYuNEMxOTYuNSw0MjUuMywxODkuOCw0MjIuNCwxODUsNDE3LjZ6Ii8+DQoJCTwvZz4NCgkJPGc+DQoJCQk8Y2lyY2xlIHN0eWxlPSJmaWxsOiM2RjJGOEY7IiBjeD0iOTUuNSIgY3k9IjM5OC45IiByPSIzNS4zIi8+DQoJCTwvZz4NCgkJPGc+DQoJCQk8cGF0aCBzdHlsZT0iZmlsbDojNkYyRjhGOyIgZD0iTTM4OSw0MTcuNmMtNC44LTQuOC03LjctMTEuNC03LjctMTguN2MtMC4xLTE1Ny42LTEyOC4yLTI4NS43LTI4NS43LTI4NS43DQoJCQkJYy0xNC42LDAtMjYuNC0xMS45LTI2LjQtMjYuNGMwLTE0LjYsMTEuOS0yNi40LDI2LjQtMjYuNGM5MC41LDAsMTc1LjUsMzUuMiwyMzkuNSw5OS4yczk5LjIsMTQ5LDk5LjIsMjM5LjUNCgkJCQljMCwxNC42LTExLjksMjYuNC0yNi40LDI2LjRDNDAwLjQsNDI1LjMsMzkzLjcsNDIyLjQsMzg5LDQxNy42eiIvPg0KCQk8L2c+DQoJPC9nPg0KPC9nPg0KPC9zdmc+DQo=',
      Position = { 214, 13 },
      Size = { 62, 62 }
    },
    {
      Type = 'Image',
      Image = '',
      Position = { GridUnit, 35*GridUnit + (5*GridUnit)*(StreamCount - 1) - 2 },
      Size = { 320, 15 }
    },
    {
      Type = 'GroupBox',
      Text = 'Status',
      HTextAlign = 'Left',
      StrokeWidth = 1, CornerRadius = 8,
      Position = { 2*GridUnit, LogoOffset + 2*GridUnit },
      Size = { 38*GridUnit, 6*GridUnit }
    },
    {
      Type = 'GroupBox',
      Text = 'Stream',
      HTextAlign = 'Left',
      StrokeWidth = 1, CornerRadius = 8,
      Position = { 2*GridUnit, LogoOffset + 10 * GridUnit },
      Size = { 38*GridUnit, 10*GridUnit + (5*GridUnit)*(StreamCount - 1) }
    },
    {
      Type = 'Label',
      Text = 'URL',
      HTextAlign = 'Left',
      Size = { 8*GridUnit, 2*GridUnit },
      Position = { 10*GridUnit, LogoOffset + 12*GridUnit }
    },
    {
      Type = 'Label',
      Text = 'Listeners',
      HTextAlign = 'Left',
      Size = { 8*GridUnit, 2*GridUnit },
      Position = { 30*GridUnit + ControlSpacing, LogoOffset + 12*GridUnit }
    }
  };

  local layout = {};
  layout['Status'] = {
    Position = { 10*GridUnit, LogoOffset + 3*GridUnit },
    Size = { 28*GridUnit, 4*GridUnit }
  };

  for i=1,StreamCount do
    local yPos = LogoOffset + 14*GridUnit + (5*GridUnit)*(i - 1);
    table.insert(graphics, {
      Type = 'Label',
      Text = string.format('%d', i),
      Position = { 2*GridUnit, yPos },
      Size = { 5*GridUnit, 4*GridUnit }
    });
    layout[('Stream %d Channel 1 Peak Level'):format(i)] = {
      Position = { 8*GridUnit - 2*ControlSpacing, yPos },
      Size = { GridUnit, 4*GridUnit },
      CornerRadius = 0, ShowTextbox = false,
      PrettyName = ('Stream %d~Channel 1 Peak Level'):format(i)
    };
    layout[('Stream %d Channel 2 Peak Level'):format(i)] = {
      Position = { 9*GridUnit - ControlSpacing, yPos },
      Size = { GridUnit, 4*GridUnit },
      CornerRadius = 0, ShowTextbox = false,
      PrettyName = ('Stream %d~Channel 2 Peak Level'):format(i)
    };
    layout[('Stream %d URL'):format(i)] = {
      Position = { 10*GridUnit , yPos },
      Size = { 20*GridUnit, 4*GridUnit },
      PrettyName = ('Stream %d~URL'):format(i);
    };
    layout[('Stream %d Listener Count'):format(i)] = {
      Position = { 30*GridUnit + ControlSpacing, yPos },
      Size = { 8*GridUnit - ControlSpacing, 4*GridUnit },
      PrettyName = ('Stream %d~Listener Count'):format(i);
    };
  end;

  return layout, graphics;

end;

-- [[ RUNTIME ]] --
if(not Controls) then return; end;

-- Properties
StreamCount = Properties['Stream Count'].Value;
ServerPort = Properties['Server Port'].Value;
Bitrate = Properties['Bitrate'].Value;

-- Ease-of-access
MST = {};
StreamControls = {};
for i=1,StreamCount do
  MST[i] = _G[('MST%d'):format(i)];
  StreamControls[i] = {};
end; print(('# Enumerated %d media stream transmitters...'):format(#MST));
for k,c in pairs(Controls) do
  local stream, control = k:match('^Stream (%d+) (.+)');
  if(stream) then StreamControls[tonumber(stream)][control] = c; end;
end; print(('# Enumerated controls for %d streams...'):format(#StreamControls));

-- Configure MSTs
for i,mst in ipairs(MST) do
  mst.host.String = '127.0.0.1';
  mst.port.String = ServerPort - i;
  for _,v in pairs(mst['data.rate'].Choices) do
    if(v:match('(%d+)') == Bitrate:match('(%d+)')) then
      mst['data.rate'].String = v;
    end;
  end;
  print(('# Configured MST #%d, host: %s, port: %s, bitrate: %s'):format(i, mst.host.String, mst.port.String, mst['data.rate'].String));
end;

-- Link meters to MST
for i,mst in ipairs(MST) do
  for j=1,2 do
    mst[('meter.%d'):format(j)].EventHandler = function(c)
      StreamControls[i][('Channel %d Peak Level'):format(j)].Value = c.Value
    end;
  end;
end;

-- HTTP server
Sockets = {};
Server = TcpSocketServer.New();
Server.EventHandler = function(sock)
  print('# New HTTP connection.');
  sock.Data = function()
    local request = sock:ReadLine(TcpSocket.EOL.Custom, '\r\n\r\n');
    local url, protocol = request:match('^[^ ]+ ([^ \r\n]+) ([^ \r\n]+)');
    url = url:lower();
    print('# Listener requested ' .. url);
    if(Receiver.List[url]) then
      sock:Write(protocol .. ' 200 OK\r\nContent-Type: audio/mpeg\r\nicy-name: Q-Sys Audio Stream\r\n\r\n');
      Sockets[sock] = url;
    else
      sock:Write(protocol .. ' 404 Not Found\r\n\r\n');
    end;
  end;
  sock.EventHandler = function(_,evt)
    Sockets[sock] = nil;
  end;
end; Server:Listen(ServerPort);
print(('# HTTP server listening on port %d...'):format(ServerPort));

-- RTP Receiver
Receiver = {
  List = {},
  New = function(port, stream)
    U = UdpSocket.New();
    Receiver.List[stream] = U;
    U:Open('127.0.0.1', port);
    U.EventHandler = function(_, t)
      if(string.byte(t.Data, 2) ~= 0x8E) then return; end; -- only accept MPEG Audio
      local data = t.Data:sub(17);
      for sock,url in pairs(Sockets) do
        if(url == stream) then sock:Write(data); end;
      end;
    end; return U;
  end
};

-- Configure HTTP streams
Streams = {};
for i=1,StreamCount do
  Streams[i] = {
    url = ('/stream%d'):format(i),
    port = ServerPort - i
  };
end;

-- Configure receivers
for _,stream in ipairs(Streams) do Receiver.New(stream.port, stream.url); end;
print('# Initialisation complete.');

-- URL Display
UrlTimer = Timer.New();
UrlTimer.EventHandler = function()
  for i,stream in ipairs(Streams) do
    local urls = {};
    for _, iface in pairs(Network.Interfaces()) do
      table.insert(urls, ('http://%s:%d%s'):format(iface.Address, ServerPort, stream.url))
    end; StreamControls[i]['URL'].String = table.concat(urls, '\n');
  end;
end; UrlTimer:Start(1);

-- Active Listener Count
StatsTimer = Timer.New();
StatsTimer.EventHandler = function()
  for i,stream in ipairs(Streams) do
    local listenerCount = 0;
    for _, url in pairs(Sockets) do
      if(url == stream.url) then
        listenerCount = listenerCount + 1;
      end;
    end;
    StreamControls[i]['Listener Count'].String = listenerCount;
  end;
end; StatsTimer:Start(1);
